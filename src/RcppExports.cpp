// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loglik_cpp
double loglik_cpp(arma::vec V, const arma::mat& betahat, const arma::mat& shat2, const arma::mat& prior_weight, const int nsex, arma::uvec diag_index, Rcpp::List config_list);
RcppExport SEXP _sdSuSiE_loglik_cpp(SEXP VSEXP, SEXP betahatSEXP, SEXP shat2SEXP, SEXP prior_weightSEXP, SEXP nsexSEXP, SEXP diag_indexSEXP, SEXP config_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type shat2(shat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prior_weight(prior_weightSEXP);
    Rcpp::traits::input_parameter< const int >::type nsex(nsexSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type diag_index(diag_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config_list(config_listSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_cpp(V, betahat, shat2, prior_weight, nsex, diag_index, config_list));
    return rcpp_result_gen;
END_RCPP
}
// mvlmm_reg
SEXP mvlmm_reg(arma::mat betahat, arma::mat shat2, arma::mat V_mat);
RcppExport SEXP _sdSuSiE_mvlmm_reg(SEXP betahatSEXP, SEXP shat2SEXP, SEXP V_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type shat2(shat2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V_mat(V_matSEXP);
    rcpp_result_gen = Rcpp::wrap(mvlmm_reg(betahat, shat2, V_mat));
    return rcpp_result_gen;
END_RCPP
}
// uni_reg
SEXP uni_reg(arma::mat betahat, arma::mat shat2, arma::mat V_mat, int config_vec);
RcppExport SEXP _sdSuSiE_uni_reg(SEXP betahatSEXP, SEXP shat2SEXP, SEXP V_matSEXP, SEXP config_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type shat2(shat2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V_mat(V_matSEXP);
    Rcpp::traits::input_parameter< int >::type config_vec(config_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(uni_reg(betahat, shat2, V_mat, config_vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sdSuSiE_loglik_cpp", (DL_FUNC) &_sdSuSiE_loglik_cpp, 7},
    {"_sdSuSiE_mvlmm_reg", (DL_FUNC) &_sdSuSiE_mvlmm_reg, 3},
    {"_sdSuSiE_uni_reg", (DL_FUNC) &_sdSuSiE_uni_reg, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_sdSuSiE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
